// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  MITHGrid.globalNamespace("ookook", function(ookook) {
    ookook.namespace("config", function(config) {
      return config.url_base = '';
    });
    ookook.namespace("util", function(util) {
      util.ajax = function(config) {
        var ops;
        ops = {
          url: ookook.config.url_base + config.url,
          type: config.type,
          contentType: 'application/json',
          processData: false,
          dataType: 'json',
          success: config.success,
          error: config.error
        };
        if (config.data != null) {
          ops.data = JSON.stringify(config.data);
        }
        return $.ajax(ops);
      };
      util.get = function(config) {
        return ookook.util.ajax($.extend({
          type: 'GET'
        }, config));
      };
      util.post = function(config) {
        return ookook.util.ajax($.extend({
          type: 'POST'
        }, config));
      };
      util.put = function(config) {
        return ookook.util.ajax($.extend({
          type: 'PUT'
        }, config));
      };
      util["delete"] = function(config) {
        return ookook.util.ajax($.extend({
          type: 'DELETE'
        }, config));
      };
      util.success_message = function(msg) {
        var div;
        div = $("<div class='alert alert-success'><a class='close' data-dismiss='alert' href='#'>&times;</a><h4 class='alert-heading'>Success!</h4></div>");
        div.append(msg);
        $("#messages").append(div);
        return setTimeout(function() {
          return div.animate({
            opacity: 0
          }, 1000, function() {
            return div.remove();
          });
        }, 2000);
      };
      return util.error_message = function(msg) {
        var div;
        div = $("<div class='alert alert-error'><a class='close' data-dismiss='alert' href='#'>&times;</a><h4 class='alert-heading'>Uh oh!</h4></div>");
        div.append(msg);
        return $("#messages").append(div);
      };
    });
    ookook.namespace("presentation", function(presentation) {
      return presentation.namespace("metro", function(metro) {
        return metro.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ['ookook.presentation.metro'].concat(__slice.call(args), [function(that, container) {
            var baseLens, options;
            options = that.options;
            baseLens = function(hubEl, presentation, model, itemId) {
              var classes, description, el, finalHeight, finalWidth, item, rendering, title, width, _ref;
              rendering = {};
              item = model.getItem(itemId);
              el = $('<div></div>');
              rendering.el = el;
              hubEl.append(el);
              if (item.title != null) {
                title = $('<h1></h1>');
                title.text(item.title[0]);
                el.append(title);
              }
              if (item.description != null) {
                description = $('<p></p>');
                description.text(item.description[0]);
                el.append(description);
              }
              width = ((_ref = item.rank) != null ? _ref[0] : void 0) || 1;
              classes = "";
              if (item["class"] != null) {
                classes = item["class"].join(" ");
              }
              el.attr({
                "class": "hub-item span" + (width * 2) + " " + classes
              });
              finalHeight = el.height();
              finalWidth = el.width();
              el.height(0);
              el.width(0);
              el.attr({
                opacity: 0
              });
              el.animate({
                width: finalWidth,
                height: finalHeight,
                opacity: 1
              }, 750 * width);
              rendering.remove = function() {
                return el.animate({
                  width: 0,
                  height: 0,
                  opacity: 0
                }, 750 * width, function() {
                  return el.remove();
                });
              };
              return rendering;
            };
            that.startDisplayUpdate = function() {};
            that.finishDisplayUpdate = function() {
              return $(container).masonry({
                itemSelector: '.hub-item',
                columnWidth: 75
              });
            };
            that.addLens('URLLink', function(hubEl, presentation, model, itemId) {
              var item, link, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              if (item.link != null) {
                link = item.link[0];
                return $(rendering.el).click(function() {
                  return window.location.href = link;
                });
              }
            });
            that.addLens('EmptyItem', baseLens);
            return that.addLens('SectionLink', function(hubEl, presentation, model, itemId) {
              var item, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              $(rendering.el).click(function() {
                window.History.pushState({
                  parent: options.application().getMetroParent()
                }, '', '/');
                return options.application().setMetroParent(item.id[0]);
              });
              return rendering;
            });
          }]));
        };
      });
    });
    return ookook.namespace("application", function(apps) {
      return apps.namespace("top", function(top) {
        return top.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Application).initInstance.apply(_ref, ['ookook.application.top'].concat(__slice.call(args), [function(that, container) {
            return that.ready(function() {
              return that.events.onMetroParentChange.addListener(function(p) {
                var item;
                that.dataView.metroItems.setKey(p);
                item = that.dataView.metroItems.getItem(p);
                if (item.parent != null) {
                  item = that.dataView.metroItems.getItem(item.parent[0]);
                  if (item.title != null) {
                    $('#level-up').text(item.title[0]);
                  } else {
                    $('#level-up').text("Up");
                  }
                  $('#level-up').show();
                  if ($('#level-up').width() === 0) {
                    return $('#level-up').animate({
                      width: 150,
                      height: 75,
                      opacity: 1
                    }, 250);
                  }
                }
              });
            });
          }]));
        };
      });
    });
  });

  MITHGrid.defaults('ookook.application.top', {
    dataStores: {
      data: {
        types: {
          HubItem: {},
          Project: {},
          Library: {},
          Board: {}
        },
        properties: {}
      }
    },
    dataViews: {
      metroItems: {
        dataStore: 'data',
        type: MITHGrid.Data.SubSet,
        key: 'top',
        expressions: ['!parent']
      }
    },
    variables: {
      MetroParent: {
        is: 'rw'
      }
    },
    presentations: {
      top: {
        type: ookook.presentation.metro,
        container: " .ookook-hub",
        dataView: 'metroItems'
      }
    },
    viewSetup: "<div class=\"row\">\n  <div class=\"offset1 span10 ookook-hub\"></div>\n</div>"
  });

}).call(this);
