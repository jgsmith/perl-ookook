// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $.fn.tree = function(config) {
    var ops, renderLine, tableEl, walkTree;
    tableEl = this;
    ops = config.operations;
    ops.removeItem = ops.removeItem || function(path, item, cb) {
      return cb();
    };
    renderLine = function(slug, item, path, parent) {
      var el, i, n, pageTitleTd, t, td, _i;
      el = $("<tr class='hoverable'></tr>");
      item.el = el;
      td = $("<td></td>");
      t = "";
      n = path.length;
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        t += "&mdash;";
      }
      t += " " + slug;
      td.append(t);
      item.el.append(td);
      td = $("<td></td>");
      if (item.hasOwnProperty("visual")) {
        if (config.pages.hasOwnProperty(item.visual)) {
          if ((config.pages[item.visual].title != null) && config.pages[item.visual].title !== "") {
            td.text(config.pages[item.visual].title);
          } else {
            td.append("&mdash;");
          }
          pageTitleTd = td;
        } else {
          td.text("Unknown page: " + item.visual);
        }
      }
      item.el.append(td);
      td = $("<td><div class='btn-group'></div></td>");
      t = $("<button class='btn'>Edit</button>");
      t.click(function() {
        return ops.editItem(path, item, function() {
          return pageTitleTd.text(config.pages[item.visual].title);
        });
      });
      td.find(".btn-group").append(t);
      td.find(".btn-group").append($("<button class='btn dropdown-toggle' data-toggle='dropdown'><span class='caret'></span></button>"));
      td.find(".btn-group").append("<ul class='dropdown-menu'></ul>");
      t = $("<a href='#'>Edit</a>");
      t.click(function() {
        return ops.editItem(path, item, function() {
          return pageTitleTd.text(config.pages[item.visual].title);
        });
      });
      td.find(".dropdown-menu").append(t);
      if (item.visual != null) {
        t = $("<a href='#'>Preview</a>");
        t.click(function() {
          return ops.previewItem(item.path, item);
        });
        td.find(".dropdown-menu").append(t);
      }
      t = $("<a href='#'>Add</a>");
      t.click(function() {
        return ops.addChild(item.path, item, function(newSlug, newItem) {
          var newEl, oldEl;
          newItem.path = path.concat([newSlug]);
          if (!item.hasOwnProperty("children")) {
            item.children = {};
          }
          if (item.children.hasOwnProperty(newSlug)) {
            oldEl = item.children[newSlug].el;
          }
          item.children[newSlug] = newItem;
          newEl = renderLine(newSlug, newItem, newItem.path, item);
          if (oldEl != null) {
            return oldEl.replaceWith(newEl);
          } else {
            return item.el.after(newEl);
          }
        });
      });
      td.find(".dropdown-menu").append(t);
      t = $("<a href='#'>Remove</a>");
      t.click(function() {
        return ops.removeItem(path, item, item.remove);
      });
      item.remove = function() {
        var hasChildren, p;
        hasChildren = false;
        if (item.hasOwnProperty('children') && item.children) {
          for (p in item.children) {
            if (item.children.hasOwnProperty(p)) {
              hasChildren = true;
              break;
            }
          }
        }
        if (hasChildren) {

        } else {
          delete parent.children[slug];
          item.el.fadeOut('slow', function() {
            return item.el.remove();
          });
          if (!(parent.visual != null)) {
            return parent.remove();
          }
        }
      };
      td.find(".dropdown-menu").append(t);
      item.el.append(td);
      return item.el;
    };
    walkTree = function(sitemap, path) {
      var item, slug, slugs, _i, _len, _results;
      slugs = [];
      path = path || [];
      if (sitemap.hasOwnProperty('children') && (sitemap.children != null)) {
        slugs = (function() {
          var _results;
          _results = [];
          for (slug in sitemap.children) {
            _results.push(slug);
          }
          return _results;
        })();
      }
      slugs.sort();
      _results = [];
      for (_i = 0, _len = slugs.length; _i < _len; _i++) {
        slug = slugs[_i];
        item = sitemap.children[slug];
        if (path.length === 0 && slug === '') {
          tableEl.append(renderLine("Home", item, path, sitemap));
        } else {
          tableEl.append(renderLine(slug, item, path, sitemap));
        }
        item.path = path.concat([slug]);
        if (item.hasOwnProperty("children")) {
          _results.push(walkTree(item, item.path));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return walkTree({
      children: config.sitemap
    }, 0);
  };

  MITHGrid.globalNamespace("ookook", function(ookook) {
    ookook.namespace("config", function(config) {
      return config.url_base = '/';
    });
    ookook.namespace("util", function(util) {
      util.ajax = function(config) {
        var ops;
        ops = {
          url: config.url,
          type: config.type,
          contentType: 'application/json',
          processData: false,
          dataType: 'json',
          success: config.success,
          error: config.error
        };
        if (config.data != null) {
          ops.data = JSON.stringify(config.data);
        }
        return $.ajax(ops);
      };
      util.get = function(config) {
        return ookook.util.ajax($.extend({
          type: 'GET'
        }, config));
      };
      util.post = function(config) {
        return ookook.util.ajax($.extend({
          type: 'POST'
        }, config));
      };
      util.put = function(config) {
        return ookook.util.ajax($.extend({
          type: 'PUT'
        }, config));
      };
      util["delete"] = function(config) {
        return ookook.util.ajax($.extend({
          type: 'DELETE'
        }, config));
      };
      util.success_message = function(msg) {
        var div;
        div = $("<div class='alert alert-success'><a class='close' data-dismiss='alert' href='#'>&times;</a><h4 class='alert-heading'>Success!</h4></div>");
        div.append(msg);
        $("#messages").append(div);
        return setTimeout(function() {
          return div.animate({
            opacity: 0
          }, 1000, function() {
            return div.remove();
          });
        }, 2000);
      };
      return util.error_message = function(msg) {
        var div;
        div = $("<div class='alert alert-error'><a class='close' data-dismiss='alert' href='#'>&times;</a><h4 class='alert-heading'>Uh oh!</h4></div>");
        div.append(msg);
        return $("#messages").append(div);
      };
    });
    ookook.namespace("Model", function(Model) {
      var makeCollectionGetter, makeModel;
      makeModel = function(config) {
        var maker, model;
        maker = function(that) {
          that.update = function(json, cb) {
            return ookook.util.put({
              url: that.url,
              data: json,
              success: function(data) {
                return cb(maker(data));
              },
              error: function() {
                return cb();
              }
            });
          };
          that["delete"] = function(cb) {
            return ookook.util["delete"]({
              url: that.url,
              success: function() {
                return cb(true);
              },
              error: function() {
                return cb(false);
              }
            });
          };
          if (config.extender != null) {
            config.extender(that);
          }
          return that;
        };
        model = function(id, cb) {
          return ookook.util.get({
            url: ookook.config.url_base + config.collection_url + '/' + id,
            success: function(that) {
              return cb(maker(that));
            },
            error: function() {
              return cb();
            }
          });
        };
        model.create = function(json, cb) {
          return ookook.util.post({
            url: ookook.config.url_base + config.collection_url,
            data: json,
            success: function(that) {
              return cb(maker(that));
            },
            error: function() {
              return cb();
            }
          });
        };
        return model;
      };
      makeCollectionGetter = function(config) {
        return function(cb) {
          return ookook.util.get({
            url: ookook.config.url_base + config.collection_url,
            success: function(that) {
              var thing, _i, _len, _ref;
              _ref = that[config.key];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                thing = _ref[_i];
                cb(thing);
              }
              return cb();
            },
            error: function() {
              return cb();
            }
          });
        };
      };
      Model.project = makeModel({
        name: 'project',
        collection_url: 'project',
        extender: function(that) {
          return that.pages = makeCollectionGetter({
            collection_url: 'project/' + that.id + '/page',
            key: 'pages'
          });
        }
      });
      Model.projects = makeCollectionGetter({
        collection_url: 'project',
        key: 'projects'
      });
      Model.library = makeModel({
        name: 'library',
        collection_url: 'library'
      });
      Model.libraries = makeCollectionGetter({
        collection_url: 'library',
        key: 'libraries'
      });
      Model.initModel = makeModel;
      return Model.initCollection = makeCollectionGetter;
    });
    ookook.namespace("Component", function(component) {
      return component.namespace("ModalForm", function(modalForm) {
        return modalForm.initInstance = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return MITHGrid.initInstance.apply(MITHGrid, ['ookook.Component.ModalForm'].concat(__slice.call(args), [function(that, container) {
            var id, options;
            options = that.options;
            id = $(container).attr('id');
            $(container).modal('hide');
            $("#" + id + "_cancel").click(function() {
              return $(container).modal('hide');
            });
            $("#" + id + "_action").click(function() {
              var data, _ref;
              data = {};
              $(container).find('.modal-form-input').each(function(idx, el) {
                var elId;
                el = $(el);
                elId = el.attr('id');
                elId = elId.substr(id.length + 1);
                return data[elId] = el.val();
              });
              if (options.createCallback != null) {
                $(container).modal('hide');
                return options.createCallback(data);
              } else if (((_ref = ookook.Model[options.model]) != null ? _ref.create : void 0) != null) {
                return ookook.Model[options.model].create(data, function(res) {
                  if (res != null) {
                    $(container).modal('hide');
                    return that.events.onCreate.fire(res);
                  }
                });
              } else {
                return $(container).modal('hide');
              }
            });
            return $(container).on('show', function() {
              return $(container).find('.modal-form-input').val("");
            });
          }]));
        };
      });
    });
    ookook.namespace("Presentation", function(presentation) {
      return presentation.namespace("NavList", function(navlist) {
        return navlist.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ['ookook.Presentation.NavList'].concat(__slice.call(args), [function(that, container) {
            var createObjectUI, navList, options, sectionEls;
            createObjectUI = ookook.Controller.CreateObjectUI.initInstance();
            options = that.options;
            sectionEls = {};
            navList = {};
            that.selfRender = function() {
              var name, _i, _len, _ref, _results;
              $(container).empty();
              navList = $('<ul class="nav nav-list"></ul>');
              $(container).append(navList);
              sectionEls = {};
              _ref = options.sectionOrder;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                name = _ref[_i];
                if (options.sections[name] != null) {
                  _results.push((function(name) {
                    var binding;
                    sectionEls[name] = $("<li class='nav-header'></li>");
                    sectionEls[name].text(name);
                    navList.append(sectionEls[name]);
                    binding = createObjectUI.bind(sectionEls[name]);
                    return binding.events.onSelect.addListener(function() {
                      return that.events.onCreateObject.fire(name);
                    });
                  })(name));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            };
            return that.render = function(c, m, i) {
              var el, item, lens, name, sectionEl, sharedTypes, t;
              item = m.getItem(i);
              sectionEl = null;
              for (name in sectionEls) {
                el = sectionEls[name];
                if (options.sections[name] != null) {
                  sharedTypes = ((function() {
                    var _i, _len, _ref, _results;
                    _ref = item.type;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      t = _ref[_i];
                      if (__indexOf.call(options.sections[name].types, t) >= 0) {
                        _results.push(t);
                      }
                    }
                    return _results;
                  })()).length;
                } else {
                  sharedTypes = 0;
                }
                if (sharedTypes > 0) {
                  sectionEl = el;
                }
              }
              if (sectionEl) {
                lens = that.getLens(i);
                if (lens != null) {
                  c = $("<li></li>");
                  lens.render(c, that, m, i);
                  return sectionEl.after(c);
                }
              }
            };
          }]));
        };
      });
    });
    ookook.namespace("Dashboard", function(dashboard) {
      return dashboard.initInstance = function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (_ref = MITHGrid.Application).initInstance.apply(_ref, ['ookook.Dashboard'].concat(__slice.call(args), [function(app, container) {
          return app.ready(function() {
            var clicker, navListLensGen, workspace, workspaceContent, workspaceItems, workspaceTabs;
            $(container).addClass('row');
            workspace = $(container).find(".ookook-workspace");
            workspaceTabs = $(workspace).find(".nav-tabs");
            workspaceContent = $(workspace).find(".tab-content");
            workspaceItems = {};
            clicker = ookook.Controller.Click.initInstance();
            navListLensGen = function(icon) {
              return function(el, view, model, id) {
                var a, binding, item, rendering;
                rendering = {};
                a = $("<a href='#'></a>");
                a.append("<i class='icon-" + icon + "'></i>");
                item = model.getItem(id);
                a.append(item.name[0]);
                el.append(a);
                binding = clicker.bind(a);
                binding.events.onSelect.addListener(function() {
                  var paneEl, tabEl, tabElA;
                  if (workspaceItems[id] != null) {
                    return $(workspaceItems[id].tab).find('a').tab('show');
                  } else {
                    paneEl = $("<div id='tab-pane-" + id + "' class='tab-pane'></div>");
                    $(workspaceContent).append(paneEl);
                    tabElA = $("<a data-toggle='tab' href='#tab-pane-" + id + "'></a>");
                    tabElA.text(item.name[0]);
                    tabEl = $("<li></li>");
                    tabEl.append(tabElA);
                    $(workspaceTabs).append(tabEl);
                    workspaceItems[id] = {
                      tab: tabEl,
                      pane: paneEl
                    };
                    workspaceItems[id].app = ookook.Model.Component[item.type[0]].initInstance(paneEl, {
                      id: id,
                      dataStore: app.dataStore.data
                    });
                    return tabElA.tab('show');
                  }
                });
                rendering.update = function(item) {
                  a.text(item.name[0]);
                  if (workspaceItems[id] != null) {
                    return $(workspaceItems[id].tab).find("a").text(item.name[0]);
                  }
                };
                rendering.remove = function() {
                  el.remove();
                  if (workspaceItems[id] != null) {
                    workspaceItems[id].tab.remove();
                    workspaceItems[id].pane.remove();
                    return delete workspaceItems[id];
                  }
                };
                return rendering;
              };
            };
            app.presentation.navlist.addLens('Project', navListLensGen('briefcase'));
            app.presentation.navlist.addLens('Library', navListLensGen('book'));
            app.presentation.navlist.addLens('Database', navListLensGen('hdd'));
            app.presentation.navlist.addLens('Component', navListLensGen('picture'));
            app.presentation.navlist.events.onCreateObject.addListener(function(t) {
              return $("#new-" + t + "-form").modal('show');
            });
            ookook.Model.projects(function(project) {
              var edition, edition_count, items, _i, _len, _ref;
              if (project != null) {
                items = [
                  {
                    id: project.uuid,
                    type: 'Project',
                    name: project.name,
                    url: project.url,
                    description: project.description
                  }
                ];
                edition_count = 0;
                _ref = project.editions;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  edition = _ref[_i];
                  items.push({
                    id: project.uuid + '-edition-' + edition_count,
                    type: 'Edition',
                    project: project.uuid,
                    frozen_on: edition.frozen_on,
                    created_on: edition.created_on,
                    name: edition.name,
                    description: edition.description
                  });
                  edition_count += 1;
                }
                app.dataStore.data.loadItems(items);
                return ookook.util.get({
                  url: project.url + '/page',
                  success: function(pages) {
                    var page, pageList, _j, _len1, _ref1;
                    pageList = [];
                    _ref1 = pages.pages;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                      page = _ref1[_j];
                      pageList.push({
                        id: page.uuid,
                        type: 'Page',
                        project: project.uuid,
                        title: page.title,
                        url: page.url
                      });
                    }
                    return app.dataStore.data.loadItems(pageList);
                  }
                });
              }
            });
            return ookook.Model.libraries(function(library) {
              if (library != null) {
                return app.dataStore.data.loadItems([
                  {
                    id: library.uuid,
                    type: 'Library',
                    name: library.name,
                    description: library.description
                  }
                ]);
              }
            });
          });
        }]));
      };
    });
    MITHGrid.defaults('ookook.Dashboard', {
      dataStores: {
        data: {
          types: {
            Project: {},
            Library: {},
            Database: {},
            Component: {},
            Edition: {},
            Page: {}
          },
          properties: {
            name: {
              valueType: 'text'
            },
            description: {
              valueType: 'text'
            },
            parent: {
              valueType: 'item'
            },
            project: {
              valueType: 'item'
            }
          }
        }
      },
      dataViews: {
        data: {
          dataStore: 'data'
        }
      },
      presentations: {
        navlist: {
          type: ookook.Presentation.NavList,
          dataView: 'data',
          container: ".ookook-nav-list",
          sectionOrder: ['Projects', 'Databases', 'Libraries', 'Components'],
          sections: {
            Projects: {
              types: ['Project'],
              icon: 'briefcase'
            },
            Libraries: {
              types: ['Library'],
              icon: 'briefcase'
            },
            Databases: {
              types: ['Database'],
              icon: 'briefcase'
            },
            Components: {
              types: ['Component'],
              icon: 'briefcase'
            }
          }
        }
      },
      viewSetup: "<div class=\"span2 ookook-nav-list \">\n</div>\n<div class=\"span10 ookook-workspace\">\n  <ul class=\"nav nav-tabs\"></ul>\n  <div class=\"tab-content\">\n  </div>\n</div>"
    });
    MITHGrid.defaults('ookook.Component.ModalForm', {
      events: {
        onCreate: null
      }
    });
    MITHGrid.defaults('ookook.Presentation.NavList', {
      events: {
        onCreateObject: null
      }
    });
    MITHGrid.defaults('ookook.Controller.CreateObjectUI', {
      bind: {
        events: {
          onSelect: null
        }
      }
    });
    return MITHGrid.defaults('ookook.Controller.Click', {
      bind: {
        events: {
          onSelect: null
        }
      }
    });
  });

}).call(this);
