// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MITHGrid.globalNamespace("ookook", function(ookook) {
    ookook.namespace("config", function(config) {
      return config.url_base = '';
    });
    ookook.namespace("util", function(util) {
      util.ajax = function(config) {
        var ops;
        ops = {
          url: ookook.config.url_base + config.url,
          type: config.type,
          contentType: 'application/json',
          processData: false,
          dataType: 'json',
          success: config.success,
          error: config.error
        };
        if (config.data != null) {
          ops.data = JSON.stringify(config.data);
        }
        return $.ajax(ops);
      };
      util.get = function(config) {
        return util.ajax($.extend({
          type: 'GET'
        }, config));
      };
      util.post = function(config) {
        return util.ajax($.extend({
          type: 'POST'
        }, config));
      };
      util.put = function(config) {
        return util.ajax($.extend({
          type: 'PUT'
        }, config));
      };
      util["delete"] = function(config) {
        return util.ajax($.extend({
          type: 'DELETE'
        }, config));
      };
      util.success_message = function(msg) {
        var div;
        div = $("<div class='alert alert-success'>\n  <a class='close' data-dismiss='alert' href='#'>&times;</a>\n  <h4 class='alert-heading'>Success!</h4>\n</div>");
        div.append(msg);
        $("#messages").append(div);
        return setTimeout(function() {
          return div.animate({
            opacity: 0
          }, 1000, function() {
            return div.remove();
          });
        }, 2000);
      };
      return util.error_message = function(msg) {
        var div;
        div = $("<div class='alert alert-error'>\n  <a class='close' data-dismiss='alert' href='#'>&times;</a>\n  <h4 class='alert-heading'>Uh oh!</h4>\n</div>");
        div.append(msg);
        return $("#messages").append(div);
      };
    });
    ookook.namespace("model", function(model) {
      return model.initModel = function(config) {
        var makeSubstitutions, that, typeNames;
        that = {};
        makeSubstitutions = function(template, data) {
          var bits, i, mbs, orig, _i, _ref;
          orig = template;
          if (template.indexOf("{?") >= 0) {
            bits = template.split('{?');
            for (i = _i = 0, _ref = bits.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (i % 2 === 1) {
                mbs = bits[i].split("}");
                bits[i] = (data[mbs[0]] || '') + mbs[1];
              }
            }
            template = bits.join("");
          }
          return template;
        };
        that.getCollection = function(info, cb) {
          var parent, url;
          if ($.isFunction(info)) {
            cb = info;
            info = {};
          }
          url = makeSubstitutions(config.collection_url, info);
          parent = makeSubstitutions(config.parent, info);
          return ookook.util.get({
            url: url,
            success: function(data) {
              var items, json, thing, _i, _len, _ref;
              items = [];
              _ref = data._embedded;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                thing = _ref[_i];
                json = that.importItem(thing);
                json.parent = parent;
                if (!(json.id != null) && (config.buildId != null)) {
                  json.id = config.buildId(json);
                }
                items.push(json);
              }
              config.dataStore.loadItems(items);
              if (cb != null) {
                return cb(data._embedded);
              }
            }
          });
        };
        that.render = function(container, presentation, model, id) {
          var k, rendering, v, _ref;
          rendering = {};
          if ((config != null ? config.schema : void 0) != null) {
            if (config.schema.belongs_to != null) {
              _ref = config.schema.belongs_to;
              for (k in _ref) {
                v = _ref[k];
                console.log(k);
              }
            }
          }
          rendering.update = function(item) {};
          rendering.remove = function() {
            return $(container).empty();
          };
          return rendering;
        };
        that.importItem = function(data) {
          var bits, id, json, k, v, _ref, _ref1, _ref2, _ref3;
          json = {};
          if ((config != null ? config.schema : void 0) != null) {
            if (config.schema.properties != null) {
              _ref = config.schema.properties;
              for (k in _ref) {
                v = _ref[k];
                json[v.source || k] = data[k];
              }
            }
            if (config.schema.belongs_to != null) {
              _ref1 = config.schema.belongs_to;
              for (k in _ref1) {
                v = _ref1[k];
                bits = (_ref2 = data._links) != null ? (_ref3 = _ref2[k]) != null ? _ref3.split("/") : void 0 : void 0;
                if (bits != null ? bits.length : void 0) {
                  id = bits[bits.length - 1];
                  if (id != null) {
                    json[v.source || k] = id;
                    if ((v.valueType != null) && (config.application().model(v.valueType) != null)) {
                      config.application().model(v.valueType).load(id);
                    }
                  }
                }
              }
            }
          }
          json.type = config.itemType || 'SectionLink';
          json.restType = config.restType;
          return json;
        };
        that.exportItem = function(data) {
          var json, k, v, _ref, _ref1, _ref2, _ref3;
          json = {};
          _ref1 = config != null ? (_ref = config.schema) != null ? _ref.properties : void 0 : void 0;
          for (k in _ref1) {
            v = _ref1[k];
            if (v.is === "rw" && v.valueType !== "hash") {
              if (((_ref2 = data[v.source]) != null ? _ref2.length : void 0) === 1) {
                json[k] = data[v.source][0];
              } else if (((_ref3 = data[v.source]) != null ? _ref3.length : void 0) > 1) {
                json[k] = data[v.source];
              } else if (data[v.source] != null) {
                json[k] = null;
              }
            }
          }
          return json;
        };
        that.schema = function() {
          return config.schema;
        };
        typeNames = {
          Board: "Editorial Board"
        };
        that.addConfig = function(c) {
          return config = $.extend(config, true, c);
        };
        that.inflateItem = function(id) {
          var i, item, items, k, linkedItem, newItems, newParents, newSize, oldItem, oldSize, parents, title, updatedItems, v, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          item = config.dataStore.getItem(id);
          items = [];
          items.push($.extend({}, true, item, {
            id: "" + id + "-factsheet",
            type: "FactSheet",
            parent: id
          }));
          if ((config != null ? config.inflateItem : void 0) != null) {
            items = items.concat(config.inflateItem(id));
          }
          parents = MITHGrid.Data.Set.initInstance([id]);
          newParents = parents;
          newSize = parents.size();
          oldSize = 0;
          while (oldSize !== newSize) {
            newParents = config.dataStore.getObjectsUnion(newParents, "parent");
            _ref = newParents.items();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              parents.add(x);
            }
            oldSize = newSize;
            newSize = parents.size();
          }
          if ((config != null ? config.schema : void 0) != null) {
            if (config.schema.belongs_to != null) {
              _ref1 = config.schema.belongs_to;
              for (k in _ref1) {
                v = _ref1[k];
                if (item[v.source || k] != null) {
                  _ref2 = item[v.source || k];
                  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                    i = _ref2[_j];
                    if (!parents.contains(i)) {
                      linkedItem = config.dataStore.getItem(i);
                      if ((linkedItem != null ? linkedItem.restType : void 0) != null) {
                        if (typeNames[linkedItem.restType[0]] != null) {
                          title = typeNames[linkedItem.restType[0]];
                        } else {
                          title = linkedItem.restType[0];
                        }
                      } else {
                        title = v.source || l;
                      }
                      items.push({
                        id: "" + id + "-" + i + "-link",
                        type: "ItemLink",
                        title: title,
                        parent: id,
                        link: i
                      });
                    }
                  }
                }
              }
            }
          }
          newItems = [];
          updatedItems = [];
          for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
            item = items[_k];
            oldItem = config.dataStore.getItem(item.id);
            if (oldItem.type != null) {
              updatedItems.push(item);
            } else {
              newItems.push(item);
            }
          }
          config.dataStore.loadItems(newItems);
          return config.dataStore.updateItems(updatedItems);
        };
        that.deflateItem = function(id) {
          var objects, _results;
          objects = MITHGrid.Data.Set.initInstance([id]);
          objects = config.dataStore.getSubjectsUnion(objects, "parent");
          _results = [];
          while (objects.size() > 0) {
            config.dataStore.removeItems(objects.items());
            _results.push(objects = config.dataStore.getSubjectsUnion(objects, "parent"));
          }
          return _results;
        };
        that.load = function(info, id) {
          var url;
          if (!(id != null)) {
            id = info;
            info = {};
          }
          url = makeSubstitutions(config.collection_url, info);
          return ookook.util.get({
            url: url + '/' + id,
            success: function(data) {
              var json;
              json = that.importItem(data);
              json.restType = config.restType;
              json.parent = config.parent;
              if (!(json.id != null) && (config.buildId != null)) {
                json.id = config.buildId(json);
              }
              if (config.dataStore.contains(id)) {
                return config.dataStore.updateItems([json], function() {
                  var count, list;
                  list = config.dataStore.withParent(config.parent);
                  count = list.length;
                  return config.dataStore.updateItems([
                    {
                      id: config.parent,
                      badge: count
                    }
                  ]);
                });
              } else {
                return config.dataStore.loadItems([json], function() {
                  var count, list;
                  list = config.dataStore.withParent(config.parent);
                  count = list.length;
                  return config.dataStore.updateItems([
                    {
                      id: config.parent,
                      badge: count
                    }
                  ]);
                });
              }
            }
          });
        };
        that.create = function(data) {
          var json, url;
          url = makeSubstitutions(config.collection_url, data);
          json = that.exportItem(data);
          return ookook.util.post({
            url: url,
            data: json,
            success: function(data) {
              var parentItem;
              json = that.importItem(data);
              json.restType = config.restType;
              json.parent = config.parent;
              if (!json.id && (config.buildId != null)) {
                json.id = config.buildId(json);
              }
              config.dataStore.loadItems([json]);
              parentItem = config.dataStore.getItem(config.parent);
              return config.dataStore.updateItems([
                {
                  id: config.parent,
                  badge: parseInt(parentItem.badge[0], 10) + 1
                }
              ]);
            }
          });
        };
        that["delete"] = function(info, id, cb) {
          var url;
          if ($.isFunction(id)) {
            cb = id;
            id = info;
            info = {};
          }
          url = makeSubstitutions(config.collection_url, info);
          return ookook.util["delete"]({
            url: url + '/' + id,
            success: function() {
              var parentItem;
              that.deflateItem(id);
              config.dataStore.removeItems([id]);
              parentItem = config.dataStore.getItem(config.parent);
              config.dataStore.updateItems([
                {
                  id: config.parent,
                  badge: parseInt(parentItem.badge[0], 10) - 1
                }
              ]);
              if (cb != null) {
                return cb();
              }
            }
          });
        };
        that.update = function(item) {
          var json, url;
          json = that.exportItem(item);
          url = makeSubstitutions(config.collection_url, item);
          return ookook.util.put({
            url: url + '/' + item.id,
            data: json
          });
        };
        return that;
      };
    });
    ookook.namespace("component", function(component) {
      component.namespace("newItemForm", function(modalForm) {
        return modalForm.initInstance = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return MITHGrid.initInstance.apply(MITHGrid, ['ookook.component.newItemForm'].concat(__slice.call(args), [function(that, container) {
            var id, options;
            options = that.options;
            id = $(container).attr('id');
            $(container).modal('hide');
            $("#" + id + "-cancel").click(function() {
              return $(container).modal('hide');
            });
            $("#" + id + "-action").click(function() {
              var data, _ref;
              data = {};
              $(container).find('.modal-form-input').each(function(idx, el) {
                var elId;
                el = $(el);
                elId = el.attr('id');
                elId = elId.substr(id.length + 1);
                data[elId] = el.val();
                if (!$.isArray(data[elId])) {
                  return data[elId] = [data[elId]];
                }
              });
              $(container).modal('hide');
              if (((_ref = options.model) != null ? _ref.create : void 0) != null) {
                return options.model.create(data);
              }
            });
            return $(container).on('show', function() {
              return $(container).find('.modal-form-input').val("");
            });
          }]));
        };
      });
      return component.namespace("editItemForm", function(modalForm) {
        return modalForm.initInstance = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return MITHGrid.initInstance.apply(MITHGrid, ['ookook.component.editItemForm'].concat(__slice.call(args), [function(that, container) {
            var id, options;
            options = that.options;
            id = $(container).attr('id');
            $(container).modal({
              keyboard: true,
              show: false
            });
            $("#" + id + "-cancel").click(function() {
              return $(container).modal('hide');
            });
            $("#" + id + "-action").click(function() {
              var data;
              data = {};
              return $(container).find('.modal-form-input').each(function(idx, el) {
                var elId;
                el = $(el);
                elId = el.attr('id');
                elId = elId.substr(id.length + 1);
                data[elId] = el.val();
                if (!$.isArray(data[elId])) {
                  data[elId] = [data[elId]];
                }
                $(container).modal('hide');
                data.id = options.application().getMetroParent();
                if (options.update != null) {
                  return options.update(data);
                }
              });
            });
            return $(container).on('show', function() {
              var app, item;
              app = options.application();
              item = app.dataStore.data.getItem(app.getMetroParent());
              $(container).find('.modal-form-input').each(function(idx, el) {
                var elId, _ref;
                el = $(el);
                elId = el.attr('id');
                elId = elId.substr(id.length + 1);
                return el.val(((_ref = item[elId]) != null ? _ref[0] : void 0) || "");
              });
              if (options.initForm != null) {
                return options.initForm(container);
              }
            });
          }]));
        };
      });
    });
    ookook.namespace("presentation", function(presentation) {
      presentation.namespace("metroCtrl", function(metroCtrl) {
        return metroCtrl.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ['ookook.presentation.metroCtrl'].concat(__slice.call(args), [function(that, container) {
            var options;
            return options = that.options;
          }]));
        };
      });
      presentation.namespace("metroNav", function(metroNav) {
        return metroNav.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ['ookook.presentation.metroNav'].concat(__slice.call(args), [function(that, container) {
            var baseLens, divider, home, homea, options, orderedRenderings, superRender;
            options = that.options;
            that.show = function() {
              return $(container).show();
            };
            that.hide = function() {
              return $(container).hide();
            };
            divider = $('<li class="divider"></li>');
            $(container).append(divider);
            home = $('<li></li>');
            homea = $('<a href="#" id="">Home</a>');
            home.append(homea);
            homea.click(function() {
              return options.application().nextState({
                parent: 'top',
                mode: 'List'
              });
            });
            divider.after(home);
            superRender = that.render;
            orderedRenderings = [];
            that.render = function(c, m, i) {
              var cdiv, rendering, _i, _ref;
              cdiv = $('<li></li>');
              rendering = superRender(cdiv, m, i);
              if (rendering == null) {
                return;
              }
              rendering.container = cdiv;
              if (!(rendering.order != null)) {
                divider.before(cdiv);
              } else {
                if (orderedRenderings.length === 0) {
                  $(container).prepend(cdiv);
                  orderedRenderings.push(rendering);
                } else {
                  if (orderedRenderings[0].order > rendering.order) {
                    $(container).prepend(cdiv);
                    orderedRenderings.unshift(rendering);
                  } else if (orderedRenderings[orderedRenderings.length - 1].order <= rendering.order) {
                    orderedRenderings[orderedRenderings.length - 1].container.after(cdiv);
                    orderedRenderings.push(rendering);
                  } else {
                    for (i = _i = 0, _ref = orderedRenderings.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                      if (orderedRenderings[i].order > rendering.order) {
                        orderedRenderings[i].container.before(cdiv);
                        orderedRenderings.splice(i, 0, rendering);
                        break;
                      }
                    }
                  }
                }
              }
              return rendering;
            };
            baseLens = function(el, presentation, model, itemId) {
              var a, item, rendering, _ref;
              rendering = {};
              item = model.getItem(itemId);
              rendering.order = (_ref = item.order) != null ? _ref[0] : void 0;
              rendering.el = el;
              a = $('<a href="#"></a>');
              el.append(a);
              rendering.a = a;
              if (item.title != null) {
                a.text(item.title[0]);
              }
              rendering.remove = function() {
                return el.remove();
              };
              rendering.update = function(item) {
                if (item.title != null) {
                  return a.text(item.title[0]);
                } else {
                  return a.text('');
                }
              };
              return rendering;
            };
            that.addLens('URLLink', function(hubEl, presentation, model, itemId) {
              var item, link, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              if (item.link != null) {
                link = item.link[0];
                return $(rendering.a).click(function() {
                  return window.location.href = link;
                });
              }
            });
            that.addLens('EmptyItem', baseLens);
            that.addLens('SectionLink', function(hubEl, presentation, model, itemId) {
              var item, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              $(rendering.a).click(function() {
                return options.application().nextState({
                  parent: item.id[0],
                  mode: 'List'
                });
              });
              return rendering;
            });
            that.addLens('ItemLink', function(hubEl, presentation, model, itemId) {
              var item, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              return $(rendering.a).click(function() {
                return options.application().nextState({
                  parent: item.id[0],
                  mode: 'Item'
                });
              });
            });
            return that.finishDisplayUpdate = function() {};
          }]));
        };
      });
      return presentation.namespace("metro", function(metro) {
        return metro.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ['ookook.presentation.metro'].concat(__slice.call(args), [function(that, container) {
            var baseLens, options, orderedRenderings, superRender;
            options = that.options;
            that.show = function() {
              return $(container).show();
            };
            that.hide = function() {
              return $(container).hide();
            };
            superRender = that.render;
            orderedRenderings = [];
            that.render = function(c, m, i) {
              var cdiv, finalHeight, finalWidth, rendering, superRemove, _i, _ref;
              cdiv = $('<div></div>');
              rendering = superRender(cdiv, m, i);
              if (rendering == null) {
                return;
              }
              rendering.container = cdiv;
              if (!(rendering.order != null)) {
                $(container).append(cdiv);
              } else {
                if (orderedRenderings.length === 0) {
                  $(container).prepend(cdiv);
                  orderedRenderings.push(rendering);
                } else {
                  if (orderedRenderings[0].order > rendering.order) {
                    container.prepend(cdiv);
                    orderedRenderings.unshift(rendering);
                  } else if (orderedRenderings[orderedRenderings.length - 1].order <= rendering.order) {
                    orderedRenderings[orderedRenderings.length - 1].container.after(cdiv);
                    orderedRenderings.push(rendering);
                  } else {
                    for (i = _i = 0, _ref = orderedRenderings.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                      if (orderedRenderings[i].order > rendering.order) {
                        orderedRenderings[i].container.before(cdiv);
                        orderedRenderings.splice(i, 0, rendering);
                        break;
                      }
                    }
                  }
                }
              }
              finalHeight = cdiv.height();
              finalWidth = cdiv.width();
              cdiv.height(0);
              cdiv.width(0);
              if (finalWidth < finalHeight) {
                cdiv.animate({
                  width: finalWidth,
                  height: finalWidth
                }, finalWidth, function() {
                  cdiv.removeAttr('width');
                  return cdiv.removeAttr('height');
                });
                cdiv.animate({
                  height: finalHeight
                }, finalHeight - finalWidth, function() {
                  cdiv.removeAttr('height');
                  return cdiv.removeAttr('width');
                });
              } else if (finalWidth > finalHeight) {
                cdiv.animate({
                  width: finalHeight,
                  height: finalHeight
                }, finalHeight, function() {
                  cdiv.removeAttr('height');
                  return cdiv.removeAttr('width');
                });
                cdiv.animate({
                  width: finalWidth
                }, finalWidth - finalHeight, function() {
                  cdiv.removeAttr('height');
                  return cdiv.removeAttr('width');
                });
              } else {
                cdiv.animate({
                  height: finalHeight,
                  width: finalWidth
                }, finalWidth, function() {
                  cdiv.removeAttr('height');
                  return cdiv.removeAttr('width');
                });
              }
              superRemove = rendering.remove;
              rendering.remove = function() {
                cdiv.animate({
                  width: 0,
                  height: 0,
                  opacity: 0
                }, (finalWidth > finalHeight ? finalHeight : finalWidth) * 2, function() {
                  return cdiv.remove();
                });
                i = __indexOf.call(orderedRenderings, rendering) >= 0;
                if (i >= 0) {
                  orderedRenderings.splice(i, 1);
                }
                if (superRemove != null) {
                  return superRemove();
                }
              };
              return rendering;
            };
            baseLens = function(el, presentation, model, itemId) {
              var badge, classes, description, height, item, rendering, title, width, _ref, _ref1;
              rendering = {};
              item = model.getItem(itemId);
              if (item.order != null) {
                rendering.order = item.order[0];
              }
              rendering.el = el;
              badge = $('<div class="badge"></div>');
              if (item.badge != null) {
                badge.text(item.badge[0]);
              }
              el.append(badge);
              title = $('<h1></h1>');
              if (item.title != null) {
                title.text(item.title[0]);
              }
              el.append(title);
              description = $('<p></p>');
              if (item.description != null) {
                description.text(item.description[0]);
              }
              el.append(description);
              rendering.badge = badge;
              rendering.description = description;
              rendering.title = title;
              width = 2 * (((_ref = item.rank) != null ? _ref[0] : void 0) || 1);
              height = 2 * (((_ref1 = item.rank) != null ? _ref1[0] : void 0) || 1);
              classes = "";
              if (item["class"] != null) {
                classes = item["class"].join(" ");
              }
              el.attr({
                "class": "tile width" + width + " height" + height + " " + classes
              });
              rendering.update = function(item) {
                if (item.description != null) {
                  description.text(item.description[0]);
                } else {
                  description.text('');
                }
                if (item.title != null) {
                  title.text(item.title[0]);
                } else {
                  title.text('');
                }
                if (item.badge != null) {
                  return badge.text(item.badge[0]);
                } else {
                  return badge.text('');
                }
              };
              rendering.remove = function() {};
              return rendering;
            };
            that.startDisplayUpdate = function() {};
            that.finishDisplayUpdate = function() {
              return $(container).masonry({
                itemSelector: '.tile',
                columnWidth: 75
              });
            };
            that.addLens('URLLink', function(hubEl, presentation, model, itemId) {
              var item, link, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              if (item.link != null) {
                link = item.link[0];
                $(rendering.el).click(function() {
                  return window.location.href = link;
                });
              }
              return rendering;
            });
            that.addLens('EmptyItem', baseLens);
            that.addLens('SectionLink', function(hubEl, presentation, model, itemId) {
              var item, rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              item = model.getItem(itemId);
              $(rendering.el).click(function() {
                return options.application().nextState({
                  parent: item.id[0]
                });
              });
              return rendering;
            });
            that.addLens('ItemLink', function(hubEl, presentation, model, itemId) {
              var rendering;
              rendering = baseLens(hubEl, presentation, model, itemId);
              return $(rendering.el).click(function() {
                var item;
                item = model.getItem(itemId);
                return options.application().nextState({
                  parent: item.link[0]
                });
              });
            });
            that.addLens('TextSection', function(el, presentation, model, itemId) {
              var data, rendering, width, _ref, _ref1, _ref2;
              rendering = {};
              data = model.getItem(itemId);
              if (data.order != null) {
                rendering.order = data.order[0];
              }
              width = ((_ref = data.width) != null ? _ref[0] : void 0) || 6;
              el.attr({
                "class": "tile text width" + width
              });
              el.append($("<h2>" + (((_ref1 = data.title) != null ? _ref1[0] : void 0) || '') + "</h2>"));
              el.append($(((_ref2 = data.content) != null ? _ref2[0] : void 0) || ""));
              el.find("a").each(function(idx, a) {
                var href, targetId;
                href = $(a).attr('href');
                if (href[0] === '#') {
                  targetId = href.slice(1);
                  return $(a).click(function() {
                    return options.application().nextState({
                      parent: targetId
                    });
                  });
                }
              });
              rendering.el = el;
              rendering.update = function(item) {};
              rendering.remove = function() {
                return el.remove();
              };
              return rendering;
            });
            return that.addLens('FactSheet', function(el, presentation, model, itemId) {
              var content, data, rendering, template, templateName, _ref;
              rendering = {};
              data = model.getItem(itemId);
              if (data.order != null) {
                rendering.order = data.order[0];
              }
              templateName = data != null ? (_ref = data.restType) != null ? _ref[0] : void 0 : void 0;
              template = ookook.template.factsheet[templateName];
              if (!(templateName != null) || !(template != null)) {
                return;
              }
              content = template(data);
              el.attr({
                "class": "tile width6 height2 subhead"
              });
              el.append($(content));
              rendering.el = el;
              rendering.update = function(item) {
                content = template(item);
                el.empty();
                return el.append($(content));
              };
              rendering.remove = function() {
                return el.remove();
              };
              return rendering;
            });
          }]));
        };
      });
    });
    ookook.namespace('template', function(template) {
      var t;
      t = function(s) {
        return function(d) {
          return _.template(s, d, {
            variable: 'data'
          });
        };
      };
      _.templateSettings = {
        interpolate: /\{\{(.*?)\}\}/g,
        escape: /\{\[(.*?)\]\}/g,
        evaluate: /\[\[(.*?)\]\]/g
      };
      return template.namespace('factsheet', function(fs) {
        fs.Project = t("<h2>{{ data.title[0] }}</h2>\n<p class='type'>Project</p>\n<p>{{ data.description[0] }}</p>");
        fs.Board = t("<h2>{{ data.title[0] }}</h2>\n<p class='type'>Editorial Board</p>\n[[ if(data.description != null && data.description.length > 0) { ]]\n<p>{{ data.description[0] }}</p>\n[[ } ]]");
        fs.SitemapPage = t("<h2>{{ data.title[0] }}</h2>\n<p class='type'>Sitemap Page</p>\n[[ if(data.page != null && data.page.length > 0) { ]]\n  <p>Linked to: {{ data.page[0] }}</p>\n[[ } ]]\n[[ if(data.description != null && data.description.length > 0) { ]]\n  <p>{{ data.description[0] }}</p>\n[[ } ]]");
        return fs.Page = t("<h2>{{ data.title[0] }}</h2>\n<p class='type'>Page</p>\n<p>{{ data.description[0] }}</p>");
      });
    });
    ookook.namespace("application", function(apps) {
      return apps.namespace("top", function(top) {
        return top.initInstance = function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (_ref = MITHGrid.Application).initInstance.apply(_ref, ['ookook.application.top'].concat(__slice.call(args), [function(that, container) {
            var models;
            that.pushState = function() {
              return window.History.pushState({
                parent: that.getMetroParent(),
                mode: that.getMetroMode()
              }, '', '/');
            };
            that.nextState = function(opts) {
              var item, newMode, oldItem, oldMode, oldParent, _ref;
              that.pushState();
              oldParent = that.getMetroParent();
              oldMode = that.getMetroMode();
              if (opts.parent != null) {
                that.setMetroParent(opts.parent);
              }
              item = that.dataStore.data.getItem(that.getMetroParent());
              if (opts.mode != null) {
                that.setMetroMode(opts.mode);
              } else {
                if ((item != null ? item.mode : void 0) != null) {
                  that.setMetroMode(item.mode[0]);
                } else if ((item != null ? item.restType : void 0) != null) {
                  that.setMetroMode('Item');
                } else {
                  that.setMetroMode('List');
                }
              }
              newMode = that.getMetroMode();
              if (oldMode === "Item" && newMode === "List" && item.parent === "top") {
                oldItem = that.dataStore.data.getItem(oldParent);
                if ((oldItem.restType != null) && (models[(_ref = oldItem.restType) != null ? _ref[0] : void 0] != null)) {
                  return models[oldItem.restType[0]].deflate(oldParent);
                } else {
                  return that.dataStore.data.removeItems(that.dataStore.data.withParent(oldParent));
                }
              }
            };
            models = {};
            that.addModel = function(nom, model) {
              return models[nom] = model;
            };
            that.model = function(nom) {
              return models[nom];
            };
            that.dataStore.data.withParent = function(p) {
              var objects;
              objects = MITHGrid.Data.Set.initInstance([p]);
              return that.dataStore.data.getSubjectsUnion(objects, "parent").items();
            };
            return that.ready(function() {
              that.events.onMetroParentChange.addListener(function(p) {
                var item;
                that.dataView.metroItems.setKey(p);
                item = that.dataStore.data.getItem(p);
                if (item.title != null) {
                  $('#section-header').text(item.title[0]);
                }
                if (p === "top") {
                  $('#section-header').text("Home");
                }
                if ((item.restType != null) && that.getAuthenticated()) {
                  $('#li-edit').show();
                  return $('#li-trash').show();
                } else {
                  $('#li-edit').hide();
                  return $('#li-trash').hide();
                }
              });
              that.events.onMetroModeChange.addListener(function(m) {});
              that.events.onAuthenticatedChange.addListener(function(a) {
                if (a) {
                  return $("#menu-settings").show();
                } else {
                  return $("#menu-settings").hide();
                }
              });
              that.setMetroMode("List");
              return that.dataView.metroItems.events.onModelChange.addListener(function(model, itemIds) {
                var id, item, liId, _i, _len, _ref, _results;
                _results = [];
                for (_i = 0, _len = itemIds.length; _i < _len; _i++) {
                  id = itemIds[_i];
                  item = model.getItem(id);
                  if (item.type && (__indexOf.call(item.type, "Command") >= 0)) {
                    liId = '#li-' + item.commandType[0];
                    if (model.contains(id) && (!((_ref = item.requiresAuthenticated) != null ? _ref[0] : void 0) || that.getAuthenticated())) {
                      _results.push($(liId).show());
                    } else {
                      _results.push($(liId).hide());
                    }
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              });
            });
          }]));
        };
      });
    });
    return $(function() {
      var app;
      app = ookook.application.top.initInstance($('#browser-container'));
      ookook.application.top.instance = app;
      app.run();
      return app.ready(function() {
        var bits, collections, initCollection;
        $("#top-nav").click(function() {
          return app.nextState({
            parent: 'top',
            mode: 'List'
          });
        });
        $("#cmd-home").click(function() {
          return app.nextState({
            parent: 'top',
            mode: 'List'
          });
        });
        $("#cmd-plus").click(function() {
          var formId, item;
          if (app.getAuthenticated()) {
            item = app.dataStore.data.getItem(app.getMetroParent());
            if (item["cmd-plus"] != null) {
              formId = item["cmd-plus"][0] + "-new-form";
              console.log("Showing", formId);
              return $('#' + formId).modal('show');
            }
          }
        });
        $("#cmd-edit").click(function() {
          var formId, item;
          if (app.getAuthenticated()) {
            item = app.dataStore.data.getItem(app.getMetroParent());
            if (item["cmd-edit"] != null) {
              formId = item["cmd-edit"][0] + "-edit-form";
              console.log("Showing", formId);
              return $('#' + formId).modal('show');
            }
          }
        });
        $("#cmd-off").click(function() {
          if (app.getAuthenticated()) {
            return window.location.href = "/oauth/logout";
          }
        });
        bits = window.location.href.split('#');
        if (bits.length > 1) {
          if (bits[1] === "") {
            bits[1] = "top";
          }
          app.setMetroParent(bits[1]);
        } else {
          app.setMetroParent("top");
        }
        $("#li-trash").click(function() {
          var item;
          if (app.getAuthenticated()) {
            item = app.dataStore.data.getItem(app.getMetroParent());
            if ((item.restType != null) && (app.model(item.restType[0]) != null)) {
              if (confirm("Delete " + item.title[0] + "?")) {
                return app.model(item.restType[0])["delete"](item.id, function() {
                  return app.setMetroParent(item.parent[0]);
                });
              }
            }
          }
        });
        app.events.onMetroParentChange.addListener(function(id) {
          var crumb, crumbs, item, li, tid, _i, _len, _results;
          item = app.dataStore.data.getItem(id);
          if ((item.restType != null) && (app.model(item.restType[0]) != null)) {
            app.model(item.restType[0]).inflateItem(id);
          }
          if (app.getAuthenticated()) {
            if (item["cmd-edit"] != null) {
              $("#li-edit").show();
            } else {
              $("#li-edit").hide();
            }
            if (item["cmd-plus"] != null) {
              $("#li-plus").show();
            } else {
              $("#li-plus").hide();
            }
          } else {
            $("#li-edit").hide();
            $("#li-plus").hide();
          }
          crumbs = [];
          tid = id;
          while ((tid != null) && tid !== "top") {
            crumbs.push({
              id: tid,
              title: item.title[0]
            });
            tid = item.parent[0];
            item = app.dataStore.data.getItem(tid);
          }
          $(".ookook-breadcrumb").empty();
          if (crumbs.length > 10) {
            crumbs = crumbs.slice(0, 10);
            $(".ookook-breadcrumb").append($("<li>... <span class='divider'>/</span></li>"));
          }
          if (crumbs.length === 0) {
            return $(".ookook-breadcrumb").hide();
          } else {
            $(".ookook-breadcrumb").show();
            crumbs.reverse();
            _results = [];
            for (_i = 0, _len = crumbs.length; _i < _len; _i++) {
              crumb = crumbs[_i];
              if (crumb.id === id) {
                li = $("<li class='active'></li>");
                li.text(crumb.title);
              } else {
                li = $("<li><a href='#'></a> <span class='divider'>/</span> </li>");
                li.find("a").text(crumb.title);
                (function(c) {
                  return li.find("a").click(function() {
                    return app.setMetroParent(c);
                  });
                })(crumb.id);
              }
              _results.push($(".ookook-breadcrumb").append(li));
            }
            return _results;
          }
        });
        initCollection = function(model, nom) {
          app.model(model).getCollection(function(list) {
            return app.dataStore.data.updateItems([
              {
                id: "section-" + nom,
                badge: list.length
              }
            ]);
          });
          if (model !== "Board") {
            ookook.component.newItemForm.initInstance($("#" + model + "-new-form"), {
              application: function() {
                return app;
              },
              model: app.model(model)
            });
            return ookook.component.editItemForm.initInstance($("#" + model + "-edit-form"), {
              application: function() {
                return app;
              },
              model: app.model(model)
            });
          }
        };
        collections = [];
        app.dataView.metroTopItems.events.onModelChange.addListener(function(dm, itemIds) {
          var id, item, model, nom, _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = itemIds.length; _i < _len; _i++) {
            id = itemIds[_i];
            if (__indexOf.call(collections, id) >= 0) {
              continue;
            }
            item = dm.getItem(id);
            if (__indexOf.call(item.type, "SectionLink") < 0) {
              continue;
            }
            if (item.id[0].slice(0, 8) !== "section-") {
              continue;
            }
            nom = item.id[0].slice(8, item.id[0].length);
            model = (_ref = item.model) != null ? _ref[0] : void 0;
            if ((nom != null) && nom !== "" && (model != null) && (app.model(model) != null)) {
              collections.push(id);
              _results.push(initCollection(model, nom));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        return ookook.util.get({
          url: '/',
          success: function(data) {
            var count, i, info, items, key, parentId, pi, s, si, walkSitemap, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
            items = [];
            if (data._embedded != null) {
              count = 0;
              _ref = data._embedded;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                info = _ref[_i];
                count += 1;
                key = info.id;
                if ((((_ref1 = info._links) != null ? _ref1.self : void 0) != null) && (info.dataType != null) && !(app.model(info.dataType) != null)) {
                  app.addModel(info.dataType, ookook.model.initModel({
                    collection_url: info._links.self,
                    dataStore: app.dataStore.data,
                    restType: info.dataType,
                    parent: "section-" + key,
                    schema: info.schema,
                    application: function() {
                      return app;
                    }
                  }));
                }
                pi = {
                  id: "section-" + key,
                  type: 'SectionLink',
                  rank: (count === 1 ? 2 : 1),
                  parent: 'top',
                  "class": (count === 1 ? "primary" : ""),
                  order: 0,
                  badge: 0,
                  title: info.title,
                  model: info.dataType
                };
                if (key !== "board") {
                  pi["cmd-plus"] = info.dataType;
                }
                items.push(pi);
              }
            }
            if (data._links != null) {
              _ref2 = data._links;
              for (key in _ref2) {
                info = _ref2[key];
                if (typeof info !== "string") {
                  items.push({
                    id: "link-" + key,
                    parent: 'top',
                    type: 'URLLink',
                    link: info.url,
                    order: 10,
                    title: info.title,
                    "class": (info.dangerous ? "danger" : "welcome")
                  });
                }
              }
            }
            if (data._text != null) {
              _ref3 = data._text;
              for (key in _ref3) {
                info = _ref3[key];
                if (key === "top") {
                  parentId = key;
                } else {
                  items.push({
                    id: "text-" + key,
                    parent: info.parent || 'top',
                    type: 'SectionLink',
                    order: 5,
                    title: info.title
                  });
                  parentId = "text-" + key;
                }
                if (((_ref4 = info._embedded) != null ? _ref4.sections : void 0) != null) {
                  i = 0;
                  _ref6 = (_ref5 = info._embedded) != null ? _ref5.sections : void 0;
                  for (_j = 0, _len1 = _ref6.length; _j < _len1; _j++) {
                    s = _ref6[_j];
                    si = {
                      id: "text-" + key + "-section-" + i,
                      parent: parentId,
                      type: 'TextSection',
                      content: s.content,
                      order: 1000,
                      title: s.title
                    };
                    if (s.width != null) {
                      si.width = s.width;
                    }
                    items.push(si);
                    i += 1;
                  }
                }
              }
            }
            walkSitemap = function(parent, map) {
              var item, n;
              i = 0;
              items = [];
              for (n in map) {
                s = map[n];
                item = {
                  id: "" + parent + "-" + i,
                  parent: parent,
                  title: n,
                  restType: "SitemapPage",
                  type: "SectionLink"
                };
                items.push(item);
                item = {
                  id: "" + parent + "-" + i + "-fs",
                  parent: "" + parent + "-" + i,
                  title: n,
                  restType: "SitemapPage",
                  type: "FactSheet"
                };
                if (s.visual != null) {
                  item.page = s.visual;
                }
                items.push(item);
                if (s.children != null) {
                  items = items.concat(walkSitemap("" + parent + "-" + i, s.children));
                }
                i += 1;
              }
              return items;
            };
            if (app.model('Project') != null) {
              app.model('Project').addConfig({
                inflateItem: function(id) {
                  var item, pitems, _ref7, _ref8, _ref9;
                  pitems = [];
                  item = app.dataStore.data.getItem(id);
                  if (app.getAuthenticated() && (((_ref7 = item.sitemap) != null ? _ref7[0] : void 0) != null)) {
                    pitems.push({
                      id: "" + id + "-sitemap",
                      title: "Sitemap",
                      type: "SectionLink",
                      restType: "SitemapPage",
                      parent: id
                    });
                    pi = {
                      id: "" + id + "-sitemap-0",
                      parent: "" + id + "-sitemap",
                      title: "Home Page",
                      restType: "SitemapPage",
                      type: "FactSheet"
                    };
                    if (((_ref8 = item.sitemap[0][""]) != null ? _ref8.visual : void 0) != null) {
                      pi.page = item.sitemap[0][""].visual;
                    }
                    pitems.push(pi);
                    if (((_ref9 = item.sitemap[0][""]) != null ? _ref9.children : void 0) != null) {
                      pitems = pitems.concat(walkSitemap("" + id + "-sitemap-0", item.sitemap[0][""].children));
                    }
                  }
                  pitems.push({
                    id: "" + id + "-pages",
                    parent: id,
                    type: "SectionLink",
                    title: "Pages",
                    badge: 0
                  });
                  app.model("Page").getCollection({
                    project_id: id
                  }, function(list) {
                    return app.dataStore.data.updateItems([
                      {
                        id: "" + id + "-pages",
                        badge: list.length
                      }
                    ]);
                  });
                  return pitems;
                }
              });
            }
            ookook.util.get({
              url: '/page',
              success: function(data) {
                app.addModel('PagePart', ookook.model.initModel({
                  collection_url: '/page/{?page_id}/page_part',
                  dataStore: app.dataStore.data,
                  restType: 'PagePart',
                  parent: "{?page_id}",
                  schema: {
                    properties: {
                      title: {
                        is: 'rw',
                        source: 'title',
                        valueType: 'text'
                      },
                      content: {
                        is: 'rw',
                        source: 'content',
                        valueType: 'text'
                      },
                      id: {
                        is: 'ro',
                        source: 'id',
                        valueType: 'text'
                      }
                    },
                    belongs_to: {
                      page: {
                        is: 'ro',
                        source: 'page'
                      }
                    }
                  },
                  application: function() {
                    return app;
                  },
                  buildId: function(item) {
                    return item.parent + "-part-" + item.title;
                  }
                }));
                app.addModel('Page', ookook.model.initModel({
                  collection_url: '/project/{?project_id}/page',
                  dataStore: app.dataStore.data,
                  restType: 'Page',
                  parent: "{?project_id}-pages",
                  schema: data._schema,
                  application: function() {
                    return app;
                  },
                  inflateItem: function(id) {
                    var item, pitems;
                    item = app.dataStore.data.getItem(id);
                    pitems = [];
                    if (app.getAuthenticated()) {
                      pitems.push({
                        id: "" + id + "-factsheet",
                        parent: id,
                        title: item.title,
                        description: item.description,
                        restType: "Page",
                        type: "FactSheet"
                      });
                      pitems.push({
                        id: id,
                        "cmd-plus": "PagePart",
                        "cmd-edit": "Page"
                      });
                      app.model('PagePart').getCollection({
                        page_id: id
                      });
                    }
                    return pitems;
                  }
                }));
                ookook.component.newItemForm.initInstance($("#PagePart-new-form"), {
                  application: function() {
                    return app;
                  },
                  model: app.model("PagePart")
                });
                ookook.component.editItemForm.initInstance($("#PagePart-edit-form"), {
                  application: function() {
                    return app;
                  },
                  model: app.model("PagePart")
                });
                ookook.component.newItemForm.initInstance($("#Page-new-form"), {
                  application: function() {
                    return app;
                  },
                  model: app.model("Page")
                });
                return ookook.component.editItemForm.initInstance($("#Page-edit-form"), {
                  application: function() {
                    return app;
                  },
                  model: app.model("Page")
                });
              }
            });
            return ookook.util.get({
              url: '/profile',
              error: function() {
                app.setAuthenticated(false);
                return app.dataStore.data.loadItems(items);
              },
              success: function(data) {
                var item, service, _k, _len2, _ref7;
                app.setAuthenticated(true);
                items.push({
                  id: 'section-settings',
                  title: "Settings",
                  mode: 'Item',
                  type: "EmptyLink"
                });
                items.push({
                  id: 'section-profile',
                  title: 'Profile',
                  type: 'SectionLink',
                  mode: 'Item'
                });
                items.push({
                  id: 'section-profile-services',
                  title: 'Authentication Methods',
                  order: 10,
                  type: 'Section',
                  parent: 'section-profile'
                });
                _ref7 = data.services;
                for (_k = 0, _len2 = _ref7.length; _k < _len2; _k++) {
                  service = _ref7[_k];
                  item = {
                    id: "oauth-" + service.name,
                    parent: 'section-profile-services',
                    order: 10,
                    title: service.name
                  };
                  if (service.connected) {
                    item.type = "URLLink";
                    item["class"] = 'welcome';
                  } else {
                    item.type = "EmptyItem";
                  }
                  items.push(item);
                }
                return app.dataStore.data.loadItems(items);
              }
            });
          }
        });
      });
    });
  });

  MITHGrid.defaults('ookook.application.top', {
    dataStores: {
      data: {
        types: {
          SectionLink: {},
          URLLink: {},
          Project: {},
          Library: {},
          Board: {},
          BoardRank: {},
          Page: {},
          PagePart: {}
        },
        properties: {
          board_ranks: {
            valueType: 'item'
          },
          pages: {
            valueType: 'item'
          },
          parent: {
            valueType: 'item'
          }
        }
      }
    },
    dataViews: {
      metroItems: {
        dataStore: 'data',
        type: MITHGrid.Data.SubSet,
        key: 'top',
        expressions: ['!parent']
      },
      metroTopItems: {
        dataStore: 'data',
        type: MITHGrid.Data.SubSet,
        key: 'top',
        expressions: ['!parent']
      }
    },
    variables: {
      MetroParent: {
        is: 'rw',
        "default": 'top'
      },
      MetroMode: {
        is: 'rw',
        "default": 'list'
      },
      Authenticated: {
        is: 'rw',
        "default": false
      }
    },
    presentations: {
      list: {
        type: ookook.presentation.metro,
        container: " .ookook-hub",
        dataView: 'metroItems'
      },
      nav: {
        type: ookook.presentation.metroNav,
        container: " .ookook-nav",
        dataView: 'metroTopItems'
      }
    },
    viewSetup: "<div class=\"navbar navbar-fixed-top\">\n <div class=\"navbar-inner\">\n   <div class=\"container\">\n     <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\n       <span class=\"icon-bar\"></span>\n       <span class=\"icon-bar\"></span>\n       <span class=\"icon-bar\"></span>\n     </a>\n     <a class=\"brand\" href=\"#\" id=\"top-nav\">OokOok</a>\n     <div class=\"nav-collapse\">\n      <ul class=\"nav pull-right\" id=\"menu-settings\" style=\"display: none;\">\n         <li class=\"dropdown\">\n           <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n             Account\n             <b class=\"caret\"></b>\n           </a>\n           <ul class=\"dropdown-menu\">\n             <li><a href=\"#\" id=\"cmd-user\"><i class=\"icon-user icon-white\"></i> Profile</a></li>\n             <li><a href=\"#\" id=\"cmd-cog\"><i class=\"icon-cog icon-white\"></i> Settings</a></li>\n             <li class=\"divider\"></li>\n             <li><a href=\"#\" id=\"cmd-off\"><i class=\"icon-off icon-white\"></i> Logout</a></li>\n           </ul>\n         </li>\n      </ul>\n       <ul class=\"nav\">\n         <li class=\"dropdown\">\n           <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n             <span id=\"section-header\">Home</span>\n             <b class=\"caret\"></b>\n           </a>\n          <ul class='dropdown-menu ookook-nav'></ul>\n         </li>\n       </ul>\n     </div>\n   </div>\n </div>\n</div>\n<div class=\"row-fluid\">\n  <div class=\"span12\">\n    <ul class=\"breadcrumb ookook-breadcrumb\" style=\"display: none;\">\n    </ul>\n  </div>\n</div>\n<div class=\"row-fluid\">\n  <div class=\"span12 ookook-hub\"></div>\n</div>\n<div style=\"clear: both;\" class=\"row-fluid\"></div>\n<div class=\"navbar navbar-fixed-bottom\">\n  <div class=\"navbar-inner\">\n    <div class=\"container\">\n      <ul class=\"nav pull-right\" id=\"right-commands\">\n        <li class=\"divider-vertical\"></li>\n        <li id=\"li-trash\" style=\"display: none;\"><a href=\"#\" id=\"cmd-trash\"><i class=\"icon-trash icon-white\"></i></a></li>\n        <li id=\"li-remove\" style=\"display: none;\"><a href=\"#\" id=\"cmd-remove\"><i class=\"icon-remove icon-white\"></i></a></li>\n        <li id=\"li-edit\" style=\"display: none;\"><a href=\"#\" id=\"cmd-edit\"><i class=\"icon-edit icon-white\"></i></a></li>\n        <li id=\"li-plus\" style=\"display: none;\"><a href=\"#\" id=\"cmd-plus\"><i class=\"icon-plus icon-white\"></i></a></li>\n      </ul>\n      <ul class=\"nav pull-left\">\n        <li id=\"li-home\"><a href=\"#\" id=\"cmd-home\"><i class=\"icon-home icon-white\"></i></a></li>\n      </ul>\n    </div>\n  </div>\n</div>"
  });

}).call(this);
